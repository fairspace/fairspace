openapi: "3.0.0"
info:
  version: 0.0.1
  title: Fairspace APIs
  description: Fairspace provides APIs for managing files and its associated metadata. Files can be managed using the WebDAV protocol at the path /webdav/v1. Each webdav resource has a special `iri` property indicating the iri that is used to describe its metadata.
  license:
    name: TBD

servers:
  - url: https://workspace.ci.fairway.app/api/v1
paths:
  /metadata/:
    description: The metadata is stored as triples. Its structure should match the vocabulary definition in /vocabulary. Any updates that do not match the vocabulary definition will return a 400 status with a message indicating what went wrong.
    get:
      summary: Retrieve metadata
      operationId: getMetadata
      tags:
        - metadata
      parameters:
        - name: subject
          in: query
          description: The subject to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: predicate
          in: query
          description: The predicate to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: object
          in: query
          description: The object to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: labels
          in: query
          description: If set, the response will include labels for the included objects
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A representation of the metadata that matches the given query.
          content:
            application/ld+json:
              schema:
                $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
              example: |
                {
                  "@graph" : [ {
                    "@id" : "ws:4547ffa4-c362-4b34-a297-a225d60cb76b",
                    "label" : "John Snow"
                  }, {
                    "@id" : "ws:4bcd1780-c9cd-4bdd-b7a1-1ce966ff9ac3",
                    "label" : "Some file"
                  }, {
                    "@id" : "ws:7f0ed5bb-7a96-4715-8727-6b4b7f1facfd",
                    "@type" : "http://xmlns.com/foaf/0.1/Person",
                    "createdBy" : "ws:4547ffa4-c362-4b34-a297-a225d60cb76b",
                    "dateCreated" : "2019-05-02T11:32:42.849Z",
                    "ageOfDeath" : "2019-05-16",
                    "gaveConsent" : "ws:cbef56aa-543a-4191-ade5-58d57b071cbd",
                    "hasData" : "ws:4bcd1780-c9cd-4bdd-b7a1-1ce966ff9ac3",
                    "hasEvent" : "ws:56cbbaa8-4fcf-4048-81dc-698673a91d2c",
                    "patientIdentifier" : "SUBJECT_001",
                    "label" : "SUBJECT 001"
                  } ],
                  "@context" : {
                    "label" : {
                      "@id" : "http://www.w3.org/2000/01/rdf-schema#label"
                    },
                    "gaveConsent" : {
                      "@id" : "http://workspace.ci.fairway.app/vocabulary/gaveConsent",
                      "@type" : "@id"
                    },
                    "dateCreated" : {
                      "@id" : "http://fairspace.io/ontology#dateCreated",
                      "@type" : "http://www.w3.org/2001/XMLSchema#dateTime"
                    },
                    "hasData" : {
                      "@id" : "http://workspace.ci.fairway.app/vocabulary/hasData",
                      "@type" : "@id"
                    },
                    "createdBy" : {
                      "@id" : "http://fairspace.io/ontology#createdBy",
                      "@type" : "@id"
                    },
                    "hasEvent" : {
                      "@id" : "http://workspace.ci.fairway.app/vocabulary/hasEvent",
                      "@type" : "@id"
                    },
                    "patientIdentifier" : {
                      "@id" : "http://workspace.ci.fairway.app/vocabulary/patientIdentifier"
                    },
                    "ageOfDeath" : {
                      "@id" : "http://workspace.ci.fairway.app/vocabulary/ageOfDeath",
                      "@type" : "http://www.w3.org/2001/XMLSchema#date"
                    },
                    "vocabulary" : "http://workspace.ci.fairway.app/vocabulary/",
                    "rdfs" : "http://www.w3.org/2000/01/rdf-schema#",
                    "ws" : "http://workspace.ci.fairway.app/iri/"
                  }
                }
        '404':
          description: No metadata matched the given query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Adds metadata. Existing metadata is left untouched
      operationId: putMetadata
      tags:
        - metadata
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
            example: |
              {
                "@graph" : [ {
                  "@id" : "ws:7f0ed5bb-7a96-4715-8727-6b4b7f1facfd",
                  "hasData" : "ws:4bcd1780-c9cd-4bdd-0000-1ce966ff9ac3"
                } ],
                "@context" : {
                  "hasData" : {
                    "@id" : "http://workspace.ci.fairway.app/vocabulary/hasData",
                    "@type" : "@id"
                  },
                  "ws" : "http://workspace.ci.fairway.app/iri/"
                }
              }

      responses:
        '200':
          description: Data was stored properly
        '400':
          description: Bad request. Either the syntax or the data was invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Adds metadata. Existing metadata is overwritten.
      description: Any existing metadata for a given subject/predicate combination will be overwritten with the provided values
      operationId: patchMetadata
      tags:
        - metadata
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
            example: |
              {
                "@graph" : [ {
                  "@id" : "ws:7f0ed5bb-7a96-4715-8727-6b4b7f1facfd",
                  "hasData" : "ws:4bcd1780-c9cd-4bdd-0000-1ce966ff9ac3"
                } ],
                "@context" : {
                  "hasData" : {
                    "@id" : "http://workspace.ci.fairway.app/vocabulary/hasData",
                    "@type" : "@id"
                  },
                  "ws" : "http://workspace.ci.fairway.app/iri/"
                }
              }

      responses:
        '200':
          description: Data was stored properly
        '400':
          description: Bad request. Either the syntax or the data was invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete metadata
      description: If a request body is given in JSON-LD format, the triples specified in the body will be deleted. Otherwise, the subject specified in the subject parameter will be marked as deleted. Please note that the subject will still exist in the database.
      operationId: deleteMetadata
      tags:
        - metadata
      parameters:
        - name: subject
          in: query
          description: The subject to filter on
          required: false
          schema:
            type: string
            format: iri
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
            example: |
              {
                "@graph" : [ {
                  "@id" : "ws:7f0ed5bb-7a96-4715-8727-6b4b7f1facfd",
                  "hasData" : "ws:4bcd1780-c9cd-4bdd-0000-1ce966ff9ac3"
                } ],
                "@context" : {
                  "hasData" : {
                    "@id" : "http://workspace.ci.fairway.app/vocabulary/hasData",
                    "@type" : "@id"
                  },
                  "ws" : "http://workspace.ci.fairway.app/iri/"
                }
              }
      responses:
        '200':
          description: Data was deleted
        '400':
          description: Bad request. Either the syntax was invalid, or the data would be invalidated by this deletion.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /metadata/entities/:
    get:
      summary: Retrieve metadata entities
      operationId: getEntities
      tags:
        - metadata
      parameters:
        - name: type
          in: query
          description: The type to filter on. If given, only entities of the specified type will be returned.
          required: false
          schema:
            type: string
            format: iri
        - name: catalog
          in: query
          description: If set, the response will only return entities marked for which the type has `fs:showInCatalog` set to true. Can be used to retrieve all entities for which the type is marked as showInCatalog.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A representation of the metadata that matches the given query. The structure will include the id and the label for the entities, if present.
          content:
            application/ld+json:
              schema:
                $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
              example: |
                {
                  "@graph" : [ {
                    "@id" : "ws:51cde887-b665-4585-af46-e8312d33c7d9",
                    "@type" : "vocabulary:PersonConsent"
                  }, {
                    "@id" : "ws:a145dd0b-b1d5-41e4-a6db-cf8343399681",
                    "@type" : "vocabulary:PersonConsent",
                    "label" : "Some Consent"
                  }, {
                    "@id" : "ws:cbef56aa-543a-4191-ade5-58d57b071cbd",
                    "@type" : "vocabulary:PersonConsent"
                  } ],
                  "@context" : {
                    "label" : {
                      "@id" : "http://www.w3.org/2000/01/rdf-schema#label"
                    },
                    "vocabulary" : "http://workspace.ci.fairway.app/vocabulary/",
                    "sh" : "http://www.w3.org/ns/shacl#",
                    "rdfs" : "http://www.w3.org/2000/01/rdf-schema#",
                    "ws" : "http://workspace.ci.fairway.app/iri/",
                    "fs" : "http://fairspace.io/ontology#"
                  }
                }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /vocabulary/:
    description: The vocabulary contains a description of the structure of the metadata. It contains the types of entities that can be created, along with the datatypes for the fields. It is stored in the [SHACL](https://www.w3.org/TR/shacl/) format.

      The vocabulary structure should match the meta-vocabulary definition in /meta-vocabulary. Any updates that do not match that definition will return a 400 status with a message indicating what went wrong.
    get:
      summary: Retrieve vocabulary
      operationId: getVocabulary
      tags:
        - vocabulary
      parameters:
        - name: subject
          in: query
          description: The subject to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: predicate
          in: query
          description: The predicate to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: object
          in: query
          description: The object to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: labels
          in: query
          description: If set, the response will include labels for the included objects
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A representation of the vocabulary that matches the given query.
          content:
            application/ld+json:
              schema:
                $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
              example: |
                {
                  "@context": {
                    "dash": "http://datashapes.org/dash#",
                    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
                    "schema": "http://schema.org/",
                    "sh": "http://www.w3.org/ns/shacl#",
                    "xsd": "http://www.w3.org/2001/XMLSchema#",
                    "sh:datatype": { "@type": "@id" },
                    "sh:path": { "@type": "@id" }
                  },
                  "@graph": [
                    {
                      "@id": "schema:AddressShape",
                      "@type": "sh:NodeShape",
                      "sh:closed": true,
                      "sh:property": [
                        {
                          "sh:maxInclusive": 99999,
                          "sh:minInclusive": 10000,
                          "sh:or": {
                            "@list": [
                              {
                                "sh:datatype": "xsd:string"
                              },
                              {
                                "sh:datatype": "xsd:integer"
                              }
                            ]
                          },
                          "sh:path": "schema:postalCode"
                        },
                        {
                          "sh:datatype": "xsd:string",
                          "sh:path": "schema:streetAddress"
                        }
                      ]
                    },
                    {
                      "@id": "schema:PersonShape",
                      "@type": "sh:NodeShape",
                      "sh:property": [
                        {
                          "sh:datatype": "xsd:string",
                          "sh:name": "given name",
                          "sh:path": "schema:givenName"
                        },
                        {
                          "sh:lessThan": {
                            "@id": "schema:deathDate"
                          },
                          "sh:maxCount": 1,
                          "sh:path": "schema:birthDate"
                        },
                        {
                          "sh:node": {
                            "@id": "schema:AddressShape"
                          },
                          "sh:path": "schema:address"
                        },
                        {
                          "sh:in": {
                            "@list": [
                              "female",
                              "male"
                            ]
                          },
                          "sh:path": "schema:gender"
                        }
                      ],
                      "sh:targetClass": {
                        "@id": "schema:Person"
                      }
                    }
                  ]
                }
        '404':
          description: No vocabulary entries matched the given query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Adds a shacl definition to the vocabulary. Existing vocabulary is left untouched
      operationId: putVocabulary
      tags:
        - vocabulary
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
            example: |
              {
                "@graph": [
                  {
                    "@id": "schema:PersonShape",
                    "sh:name": "New name for personShape"
                  }
                ],
                "@context": {
                  "schema": "http://schema.org/",
                  "sh": "http://www.w3.org/ns/shacl#",
                }
              }

      responses:
        '200':
          description: Data was stored properly
        '400':
          description: Bad request. Either the syntax or the data was invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Adds a shacl definition to the vocabulary. Existing vocabulary entries are overwritten.
      description: Any existing vocabulary definitions for a given subject/predicate combination will be overwritten with the provided values
      operationId: patchVocabulary
      tags:
        - vocabulary
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
            example: |
              {
                "@graph": [
                  {
                    "@id": "schema:PersonShape",
                    "sh:name": "New name for personShape"
                  }
                ],
                "@context": {
                  "schema": "http://schema.org/",
                  "sh": "http://www.w3.org/ns/shacl#",
                }
              }

      responses:
        '200':
          description: Data was stored properly
        '400':
          description: Bad request. Either the syntax or the data was invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete vocabulary entries
      description: If a request body is given in JSON-LD format, the triples specified in the body will be deleted. Otherwise, the subject specified in the subject parameter will be marked as deleted. Please note that the subject will still exist in the database.
      operationId: deleteVocabulary
      tags:
        - vocabulary
      parameters:
        - name: subject
          in: query
          description: The subject to filter on
          required: false
          schema:
            type: string
            format: iri
      requestBody:
        content:
          application/ld+json:
            schema:
              $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
            example: |
              {
                "@graph": [
                  {
                    "@id": "schema:PersonShape",
                    "sh:name": "New name for personShape"
                  }
                ],
                "@context": {
                  "schema": "http://schema.org/",
                  "sh": "http://www.w3.org/ns/shacl#",
                }
              }
      responses:
        '200':
          description: Data was deleted
        '400':
          description: Bad request. Either the syntax was invalid, or the data would be invalidated by this deletion.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vocabulary/entities/:
    get:
      summary: Retrieve vocabulary entities
      operationId: getVocabularyEntities
      tags:
        - vocabulary
      parameters:
        - name: type
          in: query
          description: The type to filter on. If given, only entities of the specified type will be returned.
          required: false
          schema:
            type: string
            format: iri
        - name: catalog
          in: query
          description: If set, the response will only return entities marked for which the type has `fs:showInCatalog` set to true in the meta-vocabulary. Can be used to retrieve all entities for which the type is marked as showInCatalog.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A representation of the vocabulary that matches the given query. The structure will include the id and the label for the entities, if present.
          content:
            application/ld+json:
              schema:
                $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
              example: |
                {
                  "@graph" : [ {
                    "@id" : "ws:51cde887-b665-4585-af46-e8312d33c7d9",
                    "@type" : "fs:ClassShape"
                  }, {
                    "@id" : "ws:a145dd0b-b1d5-41e4-a6db-cf8343399681",
                    "@type" : "fs:RelationShape"
                  } ],
                  "@context" : {
                    "label" : {
                      "@id" : "http://www.w3.org/2000/01/rdf-schema#label"
                    },
                    "vocabulary" : "http://workspace.ci.fairway.app/vocabulary/",
                    "sh" : "http://www.w3.org/ns/shacl#",
                    "rdfs" : "http://www.w3.org/2000/01/rdf-schema#",
                    "ws" : "http://workspace.ci.fairway.app/iri/",
                    "fs" : "http://fairspace.io/ontology#"
                  }
                }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /meta-vocabulary/:
    description: The meta-vocabulary contains a description of the structure of the vocabulary. It contains the types of entities that can be created, along with the datatypes for the fields. It is stored in the [SHACL](https://www.w3.org/TR/shacl/) format.

      Please note that the meta-vocabulary is fixed and can only be changed in the code. This means that a client can
      cache the response for the meta-vocabulary for a long time.

    get:
      summary: Retrieve meta-vocabulary
      operationId: getMetaVocabulary
      tags:
        - vocabulary
      parameters:
        - name: subject
          in: query
          description: The subject to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: predicate
          in: query
          description: The predicate to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: object
          in: query
          description: The object to filter on
          required: false
          schema:
            type: string
            format: iri
        - name: labels
          in: query
          description: If set, the response will include labels for the included objects
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: A representation of the vocabulary that matches the given query.
          content:
            application/ld+json:
              schema:
                $ref: https://raw.githubusercontent.com/json-ld/json-ld.org/master/schemas/jsonld-schema.json
              example: |
                {
                  "@context":{
                    "fs":"http://fairspace.io/ontology#",
                    "owl":"http://www.w3.org/2002/07/owl#",
                    "rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
                    "sh":"http://www.w3.org/ns/shacl#",
                    "xsd":"http://www.w3.org/2001/XMLSchema#",
                    "sh:datatype": {"@type": "@id"},
                    "sh:path": {"@type": "@id"}
                  },
                  "@graph":[
                    {
                      "@id":"fs:ClassShapeMetaShape",
                      "@type":"sh:NodeShape",
                      "fs:showInCatalog":true,
                      "sh:closed":true,
                      "sh:description":"Shape of classes.",
                      "sh:ignoredProperties":{
                        "@list":[
                          {"@id":"rdf:type"},
                          {"@id":"owl:sameAs"},
                          {"@id":"sh:ignoredProperties"},
                          {"@id":"sh:message"},
                          {"@id":"fs:machineOnly"},
                          {"@id":"fs:fixedShape"},
                          {"@id":"fs:systemProperties"},
                          {"@id":"sh:closed"},
                          {"@id":"fs:createdBy"},
                          {"@id":"fs:dateCreated"},
                          {"@id":"fs:modifiedBy"},
                          {"@id":"fs:dateModified"},
                          {"@id":"fs:deletedBy"},
                          {"@id":"fs:dateDeleted"}
                        ]
                      },
                      "sh:name":"Class Shape",
                      "sh:not":{
                        "@id":"fs:ShapeIsAClosedShape"
                      },
                      "sh:property":[
                        {
                          "fs:showAsTable":true,
                          "sh:class":{
                            "@id":"sh:PropertyShape"
                          },
                          "sh:description":"List of all properties and relations for this class.",
                          "sh:minCount":1,
                          "sh:name":"Properties",
                          "sh:path":"sh:property"
                        },
                        {
                          "sh:datatype":"xsd:boolean",
                          "sh:description":"This will allow user to create new instances of this class which show up in the metadata browser.",
                          "sh:maxCount":1,
                          "sh:name":"Show in catalog",
                          "sh:path":"fs:showInCatalog"
                        },
                        {
                          "sh:datatype":"xsd:string",
                          "sh:maxCount":1,
                          "sh:minCount":1,
                          "sh:name":"Class description",
                          "sh:path":"sh:description"
                        },
                        {
                          "sh:description":"IRI of the class this shape constrains.",
                          "sh:maxCount":1,
                          "sh:minCount":1,
                          "sh:name":"Target class",
                          "sh:nodeKind":{
                            "@id":"sh:IRI"
                          },
                          "sh:path":"sh:targetClass"
                        },
                        {
                          "sh:datatype":"xsd:string",
                          "sh:maxCount":1,
                          "sh:maxLength":128,
                          "sh:minCount":1,
                          "sh:name":"Class name",
                          "sh:path":"sh:name"
                        }
                      ],
                      "sh:targetClass":{
                        "@id":"fs:ClassShape"
                      }
                    }
                  ]
                }
        '404':
          description: No meta-vocabulary entries matched the given query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /collections/:
    get:
      summary: Retrieve a list of collections
      operationId: getCollections
      tags:
        - collections
      parameters:
        - name: iri
          in: query
          description: If given, a single collection with the given IRI will be returned
          required: false
          schema:
            type: string
            format: iri
      responses:
        '200':
          description: Succesful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ReturnedCollection'
                  - $ref: '#/components/schemas/Collections'
              examples:
                single:
                  value: |
                    {
                      "iri": "http://workspace.ci.fairway.app/iri/3a95581c-de86-4977-a853-0237b3ee728e",
                      "dateCreated": "2019-04-24T13:49:05.547Z",
                      "createdBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                      "dateModified": "2019-04-24T13:49:05.547Z",
                      "modifiedBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                      "dateDeleted": null,
                      "deletedBy": null,
                      "name": "Collection update",
                      "description": "Description for test 人物",
                      "location": "aa",
                      "type": "LOCAL",
                      "access": "Manage",
                      "canWrite": true,
                      "canManage": true,
                      "canRead": true
                    }
                multiple:
                  value: |
                    [
                      {
                        "iri": "http://workspace.ci.fairway.app/iri/3a95581c-de86-4977-a853-0237b3ee728e",
                        "dateCreated": "2019-04-24T13:49:05.547Z",
                        "createdBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                        "dateModified": "2019-04-24T13:49:05.547Z",
                        "modifiedBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                        "dateDeleted": null,
                        "deletedBy": null,
                        "name": "Collection update",
                        "description": "Description for test 人物",
                        "location": "aa",
                        "type": "LOCAL",
                        "access": "Manage",
                        "canWrite": true,
                        "canManage": true,
                        "canRead": true
                      },
                      {
                          "iri": "http://workspace.ci.fairway.app/iri/f1487ce4-e4c4-4243-af34-18e33d0be7e5",
                          "dateCreated": "2019-04-24T14:14:18.093Z",
                          "createdBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                          "dateModified": "2019-04-24T14:14:18.093Z",
                          "modifiedBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                          "dateDeleted": null,
                          "deletedBy": null,
                          "name": "test",
                          "description": "",
                          "location": "test",
                          "type": "LOCAL_FILE",
                          "access": "Manage",
                          "canWrite": true,
                          "canManage": true,
                          "canRead": true
                      }
                    ]
        '404':
          description: Collection not found
    put:
      summary: Create new collection
      operationId: createCollection
      tags:
        - collections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreation'
      responses:
        '201':
          description: Created collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedCollection'
              example: |
                {
                  "iri": "http://workspace.ci.fairway.app/iri/3a95581c-de86-4977-a853-0237b3ee728e",
                  "dateCreated": "2019-04-24T13:49:05.547Z",
                  "createdBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                  "dateModified": "2019-04-24T13:49:05.547Z",
                  "modifiedBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                  "dateDeleted": null,
                  "deletedBy": null,
                  "name": "Collection update",
                  "description": "Description for test 人物",
                  "location": "aa",
                  "type": "LOCAL",
                  "access": "Manage",
                  "canWrite": true,
                  "canManage": true,
                  "canRead": true
                }
        '409':
          description: Conflict - location is already in use
    patch:
      summary: Update collection
      operationId: updateCollection
      tags:
        - collections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionUpdate'
      responses:
        '201':
          description: Updated collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnedCollection'
              example: |
                {
                  "iri": "http://workspace.ci.fairway.app/iri/3a95581c-de86-4977-a853-0237b3ee728e",
                  "dateCreated": "2019-04-24T13:49:05.547Z",
                  "createdBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                  "dateModified": "2019-04-24T13:49:05.547Z",
                  "modifiedBy": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                  "dateDeleted": null,
                  "deletedBy": null,
                  "name": "Collection update",
                  "description": "Description for test 人物",
                  "location": "aa",
                  "type": "LOCAL",
                  "access": "Manage",
                  "canWrite": true,
                  "canManage": true,
                  "canRead": true
                }
        '404':
          description: Collection with the given IRI could not be found
        '409':
          description: Conflict - location is already in use
    delete:
      summary: Delete a collection and its contents
      operationId: deleteCollection
      tags:
        - collections
      parameters:
        - name: iri
          in: query
          description: The iri of the collection to delete
          required: true
          schema:
            type: string
            format: iri
      responses:
        '204':
          description: Succesfully deleted the collection

  /permissions/:
    get:
      summary: Retrieve a set of permissions
      operationId: getPermissions
      tags:
        - permissions
      parameters:
        - name: iri
          in: query
          description: The iri of the entity to return the permissions for
          required: true
          schema:
            type: string
            format: iri
        - name: all
          in: query
          description: If given, a list of permissions for all users will be returned. Otherwise, only the permission for the current user will be returned
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Succesful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Permission'
                  - $ref: '#/components/schemas/Permissions'
              examples:
                single:
                  value: |
                    {
                        "user": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                        "access": "Manage",
                        "canWrite": true,
                        "canManage": true,
                        "canRead": true
                    }
                multiple:
                  value: |
                    [
                      {
                          "user": "http://workspace.ci.fairway.app/iri/6e6cde34-45bc-42d8-8cdb-b6e9faf890d3",
                          "access": "Manage",
                          "canWrite": true,
                          "canManage": true,
                          "canRead": true
                      },
                      {
                          "user": "http://workspace.ci.fairway.app/iri/other-user",
                          "access": "Write",
                          "canWrite": true,
                          "canManage": false,
                          "canRead": true
                      }
                    ]
        '404':
          description: Entity not found
    put:
      summary: Set the permission for a given entity and user
      description: The permission can be set for other users, if the current user has manage access to the given entity. A user can not change its own permissions. Permissions can not be set on metadata entities that are not marked as 'restricted'.
      operationId: setPermission
      tags:
        - permissions
      parameters:
        - name: iri
          in: query
          description: The iri of the entity to set the permission for
          required: true
          schema:
            type: string
            format: iri
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasicAccessProperties'
      responses:
        '201':
          description: Updated permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
              example: |
                {
                  "user": "http://test",
                  "access": "Manage",
                  "canWrite": true,
                  "canManage": true,
                  "canRead": true
                }
        '400':
          description: Invalid request body. Could also indicate validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: The current user does not have privileges to change the permissions for the given entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /permissions/restricted/:
    get:
      summary: Retrieve the restricted status of an entity
      description: Metadata entities are writable by default for anyone. However, someone with manage access can restrict the access to an entity, to prevent changes to its metadata.

        Please note that collections will never be marked as restricted.
      operationId: isRestricted
      tags:
        - permissions
      parameters:
        - name: iri
          in: query
          description: The iri of the entity to check restricted status for
          required: true
          schema:
            type: string
            format: iri
      responses:
        '200':
          description: Succesful response. For collections or unknown entities, a valid response with restricted = false is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restricted'
    put:
      summary: Set the restricted status of an entity
      operationId: setRestricted
      tags:
        - permissions
      parameters:
        - name: iri
          in: query
          description: The iri of the entity to set the restricted status for
          required: true
          schema:
            type: string
            format: iri
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restricted'
      responses:
        '200':
          description: Restricted status was set properly
        '400':
          description: Invalid request body. Could also indicate validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: The current user does not have privileges to change the permissions for the given entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    OpenID:
      type: oauth2
      flows:
        password:
          tokenUrl: https://keycloak.hyperspace.ci.fairway.app/auth/realms/ci/protocol/openid-connect/token
  schemas:
    Error:
      required:
        - status
        - message
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
        details:
          oneOf:
            - $ref: "#/components/schemas/ValidationResults"
      example: |
        {
          "status": 400,
          "message": "Validation Error",
          "details": [
            {
              "message": "The given model contains a machine-only predicate",
              "subject": "http://fairspace.io/ontology#CollectionShape",
              "predicate": "http://fairspace.io/ontology#systemProperties",
              "value": "http://fairspace.io/ontology#dateModifiedShape"
            }
          ]
        }
    ValidationResults:
      type: array
      items:
        $ref: "#/components/schemas/ValidationResult"
    ValidationResult:
      required:
        - message
        - subject
      properties:
        message:
          type: string
        subject:
          type: string
          format: iri
        predicate:
          type: string
          format: iri
        object:
          type: string
    BasicCollection:
      properties:
        name:
          type: string
        description:
          type: string
        location:
          description: Location where the collection can be found. Represents the top-level directory
          type: string
        type:
          type: string
          enum:
            - LOCAL
    CollectionCreation:
      allOf:
        - $ref: '#/components/schemas/BasicCollection'
        - required:
            - name
            - location
            - type
    CollectionUpdate:
      allOf:
        - $ref: '#/components/schemas/BasicCollection'
        - properties:
            iri:
              type: string
              format: iri
        - required:
            - iri

    ReturnedCollection:
      allOf:
        - $ref: '#/components/schemas/BasicCollection'
        - $ref: '#/components/schemas/DerivedAccessProperties'
        - properties:
            iri:
              type: string
              format: iri
            name:
              type: string
            description:
              type: string
            location:
              description: Location where the collection can be found. Represents the top-level directory
              type: string
            type:
              type: string
              enum:
                - LOCAL
            createdBy:
              type: string
              format: iri
              readOnly: true
            dateCreated:
              type: string
              format: date-time
              readOnly: true
            modifiedBy:
              type: string
              format: iri
              readOnly: true
            dateModified:
              type: string
              format: date-time
              readOnly: true
            deletedBy:
              type: string
              format: iri
              readOnly: true
            dateDeleted:
              type: string
              format: date-time
              readOnly: true
            access:
              type: string
              enum: [Manage,Write,Read,None]
              readOnly: true
            canManage:
              type: boolean
              readOnly: true
            canRead:
              type: boolean
              readOnly: true
            canWrite:
              type: boolean
              readOnly: true
    Collections:
      type: array
      items:
        $ref: "#/components/schemas/ReturnedCollection"
    DerivedAccessProperties:
      properties:
        canManage:
          type: boolean
          readOnly: true
        canRead:
          type: boolean
          readOnly: true
        canWrite:
          type: boolean
          readOnly: true
    BasicAccessProperties:
      properties:
        user:
          type: string
          format: iri
        access:
          type: string
          enum: [Manage,Write,Read,None]
    Permission:
      allOf:
        - $ref: '#/components/schemas/BasicAccessProperties'
        - $ref: '#/components/schemas/DerivedAccessProperties'
    Permissions:
      type: array
      items:
        $ref: "#/components/schemas/Permission"
    Restricted:
      properties:
        restricted:
          type: boolean
security:
  - OpenID:
      - openid
