buildscript {
    ext {
        jena_version = '5.2.0'
        milton_version = '4.0.5.2400'
        mockitoVersion = '5.11.0'
        jacksonVersion = '2.18.1' // check what version is used by Jena
        postgresqlVersion = '42.7.2'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id "io.freefair.lombok" version "8.6"
    id 'application'
    id 'jacoco'
    id "org.owasp.dependencycheck" version "8.2.1"
    id "com.diffplug.spotless" version "6.25.0"
    id 'com.github.jk1.dependency-license-report' version '2.9'
}

group 'io.fairspace'
version '1.0-SNAPSHOT'

compileJava {
    sourceCompatibility = 21
    targetCompatibility = 21
}

application {
    mainClassName = "io.fairspace.saturn.SaturnApplication"
    applicationDefaultJvmArgs = ['-XX:+ShowCodeDetailsInExceptionMessages']
}

repositories {
    mavenCentral()

    maven {
        url "https://dl.bintray.com/milton/Milton"
    }
}

lombok.version = "1.18.36"

jacoco.toolVersion = "0.8.12"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation "org.apache.jena:jena-text:${jena_version}"
    implementation "io.milton:milton-server-ce:${milton_version}"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

    implementation 'com.pivovarit:throwing-function:1.5.1'
    implementation 'com.google.guava:guava:33.3.1-jre'
    implementation('com.io-informatics.oss:jackson-jsonld:0.1.1') {
        exclude group: 'com.github.jsonld-java'
    }
    implementation('org.bouncycastle:bcprov-jdk18on:1.79')

    implementation 'org.apache.logging.log4j:log4j-layout-template-json:2.23.0'

    implementation 'org.keycloak:keycloak-admin-client:26.0.3'
    implementation 'org.keycloak:keycloak-policy-enforcer:26.0.3'

    implementation "org.postgresql:postgresql:${postgresqlVersion}"
    implementation "com.zaxxer:HikariCP:5.1.0"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "javax.mail:javax.mail-api:1.6.2"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.2'
    testImplementation "org.testcontainers:postgresql:1.19.6"
    testImplementation('com.github.stefanbirkner:system-rules:1.19.0') {
        exclude group: 'junit', module:'junit-dep'
    }

}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = true
    }
}

spotless {
    java {
        palantirJavaFormat()

        importOrder('java|javax', '', 'io.fairspace', '\\#io.fairspace', '\\#')
        removeUnusedImports()

        trimTrailingWhitespace()

        toggleOffOn()
    }
}

dependencyCheck {
    failBuildOnCVSS=9
    suppressionFile='suppressions.xml'
}

test {
    // From JVM 16 there are stricter rules on JDK internal access
    // They also blocks usage of testing library mocking environment variables,
    // That is why this additional arg for tests is needed
    jvmArgs = ['--add-opens', 'java.base/java.util=ALL-UNNAMED']
    useJUnitPlatform()
}

import com.github.jk1.license.filter.LicenseBundleNormalizer
licenseReport {
    filters = [new LicenseBundleNormalizer(bundlePath: "$projectDir/license-normalizer-bundle.json")]
    allowedLicensesFile = new File("$projectDir/allowed-licenses.json")
}